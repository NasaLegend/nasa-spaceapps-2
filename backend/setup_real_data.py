#!/usr/bin/env python3
"""
Script de configuraci√≥n para Weather Probability App con datos reales y IA
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

def run_command(command):
    """Ejecuta un comando y muestra el resultado"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {command}")
            if result.stdout:
                print(f"   {result.stdout.strip()}")
        else:
            print(f"‚ùå Error ejecutando: {command}")
            if result.stderr:
                print(f"   {result.stderr.strip()}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Excepci√≥n ejecutando {command}: {e}")
        return False

def create_directories():
    """Crea los directorios necesarios"""
    directories = ['data_cache', 'models', 'logs']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"üìÅ Directorio creado: {directory}")

def create_env_file():
    """Crea el archivo .env si no existe"""
    env_content = """# Configuraci√≥n de la aplicaci√≥n
DEBUG=True
USE_REAL_DATA=True

# APIs de datos meteorol√≥gicos
OPENWEATHER_API_KEY=your_api_key_here
NASA_POWER_ENABLED=True

# Configuraci√≥n de ML
ML_ENABLED=True
AUTO_RETRAIN=True

# Logging
LOG_LEVEL=INFO
"""
    
    if not Path('.env').exists():
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ Archivo .env creado")
    else:
        print("‚ÑπÔ∏è  Archivo .env ya existe")

async def test_real_data_service():
    """Prueba el servicio de datos reales"""
    try:
        from app.data.real_weather_data import real_weather_service
        print("‚úÖ Servicio de datos reales inicializado")
        
        # Probar con una ubicaci√≥n de ejemplo
        test_data = await real_weather_service.get_historical_data(
            latitude=40.7128,  # Nueva York
            longitude=-74.0060,
            date_of_year="06-15",  # 15 de junio
            years=5  # Solo 5 a√±os para prueba r√°pida
        )
        
        if test_data:
            print(f"‚úÖ Datos de prueba obtenidos: {len(test_data)} puntos")
            
            # Entrenar modelos con datos de prueba
            if len(test_data) >= 3:
                real_weather_service.train_prediction_models(test_data, 40.7128, -74.0060)
                print("‚úÖ Modelos de prueba entrenados")
        else:
            print("‚ö†Ô∏è  No se pudieron obtener datos de prueba (normal en primera ejecuci√≥n)")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error en prueba de datos reales: {e}")
        print("   Esto es normal si es la primera ejecuci√≥n o no hay conexi√≥n a internet")

def verify_installation():
    """Verifica que todas las dependencias est√©n instaladas"""
    dependencies = [
        'pandas', 'numpy', 'sklearn', 'aiohttp', 'joblib',
        'fastapi', 'uvicorn', 'pydantic'
    ]
    
    missing = []
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            missing.append(dep)
            print(f"‚ùå {dep} no encontrado")
    
    if missing:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {', '.join(missing)}")
        print("Ejecuta: pip install -r requirements.txt")
        return False
    
    return True

async def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üå§Ô∏è  Configurando Weather Probability App con datos reales y IA...\n")
    
    # Verificar Python
    if sys.version_info < (3, 8):
        print("‚ùå Se requiere Python 3.8 o superior")
        return
    
    print(f"‚úÖ Python {sys.version}")
    
    # Instalar dependencias
    print("\nüì¶ Instalando dependencias...")
    if not run_command("pip install -r requirements.txt"):
        print("‚ùå Error instalando dependencias")
        return
    
    # Crear directorios
    print("\nüìÅ Creando directorios...")
    create_directories()
    
    # Crear archivo .env
    print("\nüîß Configurando variables de entorno...")
    create_env_file()
    
    # Verificar instalaci√≥n
    print("\nüîç Verificando instalaci√≥n...")
    if not verify_installation():
        return
    
    # Probar servicio de datos reales
    print("\nü§ñ Probando servicio de datos reales...")
    await test_real_data_service()
    
    # Informaci√≥n final
    print("\nüéâ ¬°Configuraci√≥n completada!")
    print("\nüìã Funcionalidades disponibles:")
    print("   ‚Ä¢ Datos reales de NASA POWER API")
    print("   ‚Ä¢ Modelos de Machine Learning para predicciones")
    print("   ‚Ä¢ Cache inteligente de datos")
    print("   ‚Ä¢ Entrenamiento autom√°tico de modelos")
    print("   ‚Ä¢ Fallback a datos sint√©ticos si es necesario")
    print("\nüöÄ Para ejecutar el servidor:")
    print("   python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")
    print("\nüìñ Documentaci√≥n: http://localhost:8000/docs")
    print("üîç Info del modelo: http://localhost:8000/api/model/info")

if __name__ == "__main__":
    asyncio.run(main())